library(lmtest)
library(rpart)
yatch_data <- read.table('yatch.csv', header=TRUE, sep=',')
attach(yatch_data)
# analizando modelo regresion lineal multiple
multi.fit = lm( ResiduaryResistance ~ PrismCoeff + FroudeNumber, data = yatch_data )
summary(multi.fit)
# analizando matriz de correlacion
cor<-cor(yatch_data)
cor
# eliminando PrismCoeff del modelo
backward = lm( ResiduaryResistance ~ FroudeNumber, data = yatch_data )
# analizando nuevo modelo
summary(backward)
## Analizando los residuos
residuals <- backward$residuals
## 1. La media de los errores es cero y la suma de los errores es cero
mean(residuals)
sum(residuals)
## 2. Errores normalmente distribuidos
hist(residuals, main = "Histogram")
qqnorm(residuals)
qqline(residuals)
# test de Shapiro-Wilk
shapiro.test(residuals)
## 3. Independencia de los residuos
dwtest(backward)
## 4. Homocedasticidad
plot(backward$fitted.values,
rstandard(backward),
xlab = "Predictions",
ylab = "Residuals",
main = "Standardized Residuals")
abline(h=0,lty=2)
plot(profits,
residuals,
xlab = "ResiduaryResistance", ylab = "Residuals", main = "ResiduaryResistance vs Residuals")
plot(ResiduaryResistance,
residuals,
xlab = "ResiduaryResistance", ylab = "Residuals", main = "ResiduaryResistance vs Residuals")
abline(h=0,lty=2)
bptest(backward)
# organizando datos
.data <- data.frame(PrismCoeff, FroudeNumber, ResiduaryResistance)
# comparando medias con graficos de caja y bigotes
boxplot(ResiduaryResistance ~ PrismCoeff, data = .data,
main = "Boxplots. ResiduaryResistance vs PrismCoeff",
ylim = c(0,30),
xlab = "PrismCoeff",
ylab = "ResiduaryResistance")
boxplot(ResiduaryResistance ~ FroudeNumber, data = .data,
main = "Boxplots. ResiduaryResistance vs FroudeNumber",
xlab = "FroudeNumber",
ylab = "ResiduaryResistance")
# analisis de ANOVA
anova <- aov(ResiduaryResistance ~ PrismCoeff + FroudeNumber, data = .data)
summary(anova)
## Analizando los residuos
residuals <- anova$residuals
## 1. Errores normalmente distribuidos
hist(residuals, main = "Histogram")
qqnorm(residuals)
qqline(residuals)
# test de Shapiro-Wilk
shapiro.test(residuals)
## 2. Independencia de los residuos
dwtest(anova)
##3. Homocedasticidad
plot(anova$fitted.values,
rstandard(anova),
xlab = "Predictions",
ylab = "Residuals",
main = "Standardized Residuals")
abline(h=0,lty=2)
# prueba de bartlett
bartlett.test(residuals, FroudeNumber)
library(lmtest)
library(rpart)
yatch_data <- read.table('yatch.csv', header=TRUE, sep=',')
attach(yatch_data)
# analizando modelo regresion lineal multiple
multi.fit = lm( ResiduaryResistance ~ PrismCoeff + FroudeNumber, data = yatch_data )
summary(multi.fit)
# analizando matriz de correlacion
cor<-cor(yatch_data)
cor
# eliminando PrismCoeff del modelo
backward = lm( ResiduaryResistance ~ FroudeNumber, data = yatch_data )
# analizando nuevo modelo
summary(backward)
## Analizando los residuos
residuals <- backward$residuals
## 1. La media de los errores es cero y la suma de los errores es cero
mean(residuals)
sum(residuals)
## 2. Errores normalmente distribuidos
hist(residuals, main = "Histogram")
qqnorm(residuals)
qqline(residuals)
# test de Shapiro-Wilk
shapiro.test(residuals)
## 3. Independencia de los residuos
dwtest(backward)
## 4. Homocedasticidad
plot(backward$fitted.values,
rstandard(backward),
xlab = "Predictions",
ylab = "Residuals",
main = "Standardized Residuals")
abline(h=0,lty=2)
plot(ResiduaryResistance,
residuals,
xlab = "ResiduaryResistance", ylab = "Residuals", main = "ResiduaryResistance vs Residuals")
abline(h=0,lty=2)
bptest(backward)
# organizando datos
.data <- data.frame(PrismCoeff, FroudeNumber, ResiduaryResistance)
# comparando medias con graficos de caja y bigotes
boxplot(ResiduaryResistance ~ PrismCoeff, data = .data,
main = "Boxplots. ResiduaryResistance vs PrismCoeff",
ylim = c(0,30),
xlab = "PrismCoeff",
ylab = "ResiduaryResistance")
boxplot(ResiduaryResistance ~ FroudeNumber, data = .data,
main = "Boxplots. ResiduaryResistance vs FroudeNumber",
xlab = "FroudeNumber",
ylab = "ResiduaryResistance")
# analisis de ANOVA
anova <- aov(ResiduaryResistance ~ PrismCoeff + FroudeNumber, data = .data)
summary(anova)
## Analizando los residuos
residuals <- anova$residuals
## 1. Errores normalmente distribuidos
hist(residuals, main = "Histogram")
qqnorm(residuals)
qqline(residuals)
# test de Shapiro-Wilk
shapiro.test(residuals)
## 2. Independencia de los residuos
dwtest(anova)
##3. Homocedasticidad
plot(anova$fitted.values,
rstandard(anova),
xlab = "Predictions",
ylab = "Residuals",
main = "Standardized Residuals")
abline(h=0,lty=2)
# prueba de bartlett
bartlett.test(residuals, FroudeNumber)
# datos
data <- data.frame(LongPosition, PrismCoeff, LengthDispRatio, BeamDraughtRatio,
LengthBeamRatio, FroudeNumber, ResiduaryResistance)
# analizando correlacion entre las variables
pairs(LongPosition ~ PrismCoeff + LengthDispRatio + BeamDraughtRatio +
LengthBeamRatio + FroudeNumber + ResiduaryResistance, data = yatch_data,
main="Correlacion de las variables de la muestra")
# matriz de correlacion en forma grafica
cor <- cor(data)
symnum(cor)
# analisis de componentes principales
acp <- prcomp(data, scale = TRUE)
summary(acp)
# graficando componentes principales
plot(acp, main= "Plot de componentes principales")
# matriz de valores propios
acp$rotation
# biplot de las dos primeras componentes
biplot(acp)
# estandarizando
data.std <- scale(data, scale = TRUE)
# estandarizados vs sin estandarizar
plot(data, main = "Datos sin estandarizar")
# estandarizados vs sin estandarizar
plot(data, main = "Datos sin estandarizar")
plot(data.std, main = "Datos estandarizados")
# estandarizados vs sin estandarizar
plot(data$LongPosition, data$PrismCoeff, main = "Datos sin estandarizar",
xlab = "LongPosition", ylab = "PrismCoeff")
plot(data.std, main = "Datos estandarizados")
# estandarizados vs sin estandarizar
plot(data$LongPosition, data$PrismCoeff, main = "Datos sin estandarizar",
xlab = "LongPosition", ylab = "PrismCoeff")
plot(data.std, main = "Datos estandarizados")
# matriz de distancia con la distancia euclidiana
d <- dist(data.std, method = "euclidean")
# ajuste completo
fit <- hclust(d, method = "complete")
d2 <- as.dendrogram(fit)
# graficando
plot(fit)
rect.hclust(fit, k = 5, border = "red")
# graficando
plot(fit)
rect.hclust(fit, k = 4, border = "red")
# graficando
plot(fit)
rect.hclust(fit, k = 2, border = "red")
# por las medias
fit <- hclust(d, method = "average")
d2 <- as.dendrogram(fit)
# graficando
plot(fit)
rect.hclust(fit, k = 2, border = "red")
# ajuste completo
fit <- hclust(d, method = "complete")
d2 <- as.dendrogram(fit)
# graficando (2 clusers)
plot(fit)
rect.hclust(fit, k = 2, border = "red")
# graficando (4 clusters)
plot(fit)
rect.hclust(fit, k = 4, border = "red")
# por las medias
fit <- hclust(d, method = "average")
d2 <- as.dendrogram(fit)
# graficando (2 clusters)
plot(fit)
rect.hclust(fit, k = 2, border = "red")
# graficando (3 clusters)
plot(fit)
rect.hclust(fit, k = 3, border = "red")
fit.k1 <- kmeans(data.std, 4)
fit.k1
fit.k2 <- kmeans(data.std, 8)
fit.k2
fit.k1 <- kmeans(data.std, 4)
fit.k1
fit.k1 <- kmeans(data.std, 4)
fit.k1
fit.k2 <- kmeans(data.std, 8)
fit.k2
# analisis grafico
pairs(data.std, col = fit.k2$cluster)
# analizando resistencia residual y coeficiente prismatico
plot(data.std[ ,'ResiduaryResistance'], data.std[ ,'PrismCoeff'],
col = fit.k2$cluster, lwd=2, ylab = "Residuary Resistance", xlab = "Prism Coeff")
points(fit.k2$centers, col = 1:12, pch = 6, lwd = 2)
# cardinalidad de la poblacion (308 pero puede variar)
l <- length(data[,1])
l
# sub = se escoge al azar las 2/3 partes de la poblacion
# como conjunto entrenante para crear el arbol
sub <- sample(1:l, 2*l/3)
sub
# conjunto entrenante
data[sub,]
# conjunto de prueba
data[-sub,]
# construyendo el arbol con el conjunto entrenante
# para predecir la resistencia residual a partir del resto de las variables
tree <- rpart(ResiduaryResistance ~ ., data = data[sub,],
cp = 0.01, maxdepth = 3)
# sumario del arbol
summary(tree)
tree
# graficando arbol
plot(tree)
text(tree, use.n = TRUE, all = TRUE, pretty = 0, xpd = TRUE)
